TODO

< go로 연동해서 사용할 수 있는 go 라이브러리 찾기>

- 서버/클라이언트 역할을 해줄 수 있는 라이브러리
- go로 빌드한 서버/클라이언트 간 연결하고 띄어서 확인 토픽-메시지 잘 주고받는지 확인 정상적으로 동작하는지 

# 1. Go에서 제공하는 MQTT 라이브러리
- Eclipse Paho Go Client: 가장 많이 사용되는 MQTT 클라이언트, 안정적/풍부한 기능/Eclipse 재단에서 관리
- gmqtt: 경량의 고성능 MQTT 브로커/클라이언트 라이브러리, Pub/Sub 패턴 사용, 성능 중점
- mochi: 고성능 MQTT 브로커 라이브러리, 주로 5.0 MQTT 프로토콜 지원, 복잡 사용 사례에 유용
- emitter: HTTP 및 WebSocket을 통해 MQTT를 사용할 수 있게 함, IoT 및 실시간 애플리케이션 개발에 유용

# 2. 서버, 클라이언트 역할을 해주 수 있는 라이브러리 선택
-> gmqtt 가 유일

- paho.mqtt.golang은 클라이언트 기능만 제공, 표준화된 MQTT 클라이언트를 사용하고 싶을 때 적합, 브로커 기능 제공하지 않아 외부 브로커 필요.
- gmqtt는 서버와 클라이언트 모두를 Go로 구현하고자 할 때 유용
- emitter 라이브러리는 클라우드 기반 클라이언트 라이브러리, 브로커 기능 제공하지 않으며, 클라우드 서비스 사용을 권장.
    주로 MQTT 클라이언트로 사용되지만, 
    emitter 기반으로 브로커를 설정하고 클라이언트를 연결하는 기능은 제공하지 않는다. 
    emitter를 이용해 브로커를 직접 구현하는 것은 불가능하다. 
    대신, emitter의 클라우드 MQTT 브로커를 사용하거나, 다른 MQTT 브로커(예: Mosquitto, Mochi, EMQX)를 사용한 후 
    emitter 클라이언트를 연결하는 방식으로 통신할 수 있다.
- mochi는 브로커 기능만 제공, 클라이언트 기능 제공하지 않아 별도의 클라이언트 라이브러리 필요.

# 3. 정상 작동 여부 확인
: gmqtt 정보 부족,, 코드 제대로 작동 안함,,,,bb