# 명령행 인자 파싱 과정 간단 정리

명령어: go run broker.go -port="1884"

---

## 전체 과정 이해

1. 플래그 정의:
   프로그램이 시작할 때 `-port`와 같은 플래그를 미리 정의
   
2. 명령행 인자 파싱:
   사용자가 명령행에서 `-port="1884"`를 입력하면, 프로그램이 해당 플래그에 값을 연결

3. 포인터 사용:
   플래그 값은 포인터로 전달되어 메모리에 저장

4. 실제 코드 흐름:
   파싱된 값을 역참조해 플래그에 저장된 값을 출력하거나 사용

---

## 코드와 함께 이해하기

package main

import (
    "flag"
    "fmt"
)

func main() {
    // 1. 플래그 정의: port의 기본값은 ":1883"
    port := flag.String("port2", ":1883", "The port to use")

    // 2. 명령행 인자 파싱 (여기서 플래그 이름과 값이 매칭됨)
    flag.Parse()

    // 3. 파싱된 값 출력
    fmt.Printf("Port: %s\n", *port)  // 역참조해서 포인터가 가리키는 값 가져오기

    // 4. 남은 인자 확인 (플래그가 아닌 인자들)
    fmt.Printf("Remaining args: %v\n", flag.Args())
}

---

### 명령어 실행과 결과

go run broker.go -port2="1884"

출력:
Port: 1884
Remaining args: []

---

1. 플래그 정의 (flag.String):
   port := flag.String("port2", ":1883", "The port to use")

   - port 변수는 명령행에서 전달된 -port2 플래그 값을 저장하는 포인터 변수 역할!
   - port 변수는 기본값 :1883을 가짐
   - port 변수는 포인터(*string)로 정의됨, 이 포인터가 나중에 값을 저장할 위치를 가리킴
   - 프로그램이 실행될 때, 이 포인터는 메모리에 기본값을 저장하고 그 위치를 가리킨다

2. 명령행 인자 파싱 (flag.Parse):
   flag.Parse()

   - 프로그램이 명령행 인자를 읽고, -port2="1884"를 감지
   - 명령행 인자(-port=1884)가 프로그램 내에서 정의한 플래그 이름과 비교됨
   - -port2의 값 "1884"가 port 포인터가 가리키는 메모리 위치에 저장됨 

3. 역참조로 값 출력 (*port):
   fmt.Printf("Port: %s\n", *port)
  
   - *port는 포인터가 가리키는 값을 가져옴. 여기서는 "1884"가 출력

4. 남은 인자 출력 (flag.Args):
   fmt.Printf("Remaining args: %v\n", flag.Args())
   
   - 모든 명령행 인자가 플래그로 처리되었으므로, 남은 인자는 빈 배열([])로 출력

---

- "포인터는 집 주소"
  - 플래그 정의 시, 프로그램은 "여기 이 주소(port 변수)로 값을 저장해 주세요"라고 말하는 것

- "명령행 인자 파싱은 택배가 해당 주소로 도착하는 것"
  - 사용자가 -port="1884"라고 입력하면, "1884"라는 택배가 port 포인터가 가리키는 주소에 저장됨

- "역참조는 그 택배를 집 주소를 통해 열어보는 것"
  - *port를 사용하면 택배 안에 있는 "1884"를 꺼내와 출력

---

## 요약

1. flag.String으로 플래그를 정의하고 기본값을 설정
2. flag.Parse가 명령행 인자를 파싱해 플래그 이름과 값을 매핑
3. 포인터가 값이 저장될 위치를 가리키고, 역참조를 통해 값을 꺼내 사용
4. 남은 인자는 flag.Args()로 확인

추가)
Go의 flag 패키지는 명령행 인자에서 전달된 플래그 이름과 프로그램 내에서 정의한 플래그 이름을 비교한다.

일치하는 플래그 이름이 발견되면, 그 플래그의 포인터가 가리키는 메모리 위치에 값을 저장한다.
이 과정은 플래그 이름을 기준으로 자동 매핑된다.
