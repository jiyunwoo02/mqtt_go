<프로젝트 구상도: MQTT 브로커 & 클라이언트 기능 테스트 및 메시지 발행 시스템>

1. 목표

이 프로젝트는 MQTT의 기본 기능 테스트를 넘어, 다수의 구독자가 동일한 주제를 구독할 때의 성능과 메시지 일관성을 확인하는 것이 목적이다.

- MQTT 브로커와 클라이언트의 기본 기능 테스트를 완료하고, heavy load 테스트를 준비한다.
- 하나의 프로그램 내에서 여러 구독자가 동일한 주제를 구독하고, 메시지 수신 상태를 검증한다.
- 발행자가 발행한 메시지를 구독자에게 브로커를 거치지 않고 직접 알리는 소켓 통신을 구현한다.
- 사용자로부터 메시지 발행 횟수와 구독자 수를 입력받아 테스트의 유연성을 제공한다.

2. 프로젝트 구조

[1] 발행자 (Publisher)
기능:
- 기존의 명령행 인자에 더해, 사용자로부터 QoS 값(0, 1, 2)을 명령행 플래그로 입력받아 설정. (-q 플래그 사용)
- 사용자가 발행할 메시지와 발행 횟수(n)를 입력하면, 해당 메시지를 n번 반복 발행. (-n 플래그, 기본값 = 1)
(예: "hello#1", "hello#2" ... "hello#n")
- 메시지 발행과 동시에 구독자에게 발행 메시지를 직접 알리기 위한(브로커를 거치지 않고) 별도의 소켓 통신 채널을 열어 모든 (n 반영) 메시지를 전달.

[2] 구독자 (Subscriber)
기능:
- 동일한 주제를 여러 구독자가 동시에 구독하는 환경을 테스트.
- 사용자로부터 구독자 수(sn)를 입력받아, 하나의 프로그램 내에서 sn개의 구독자를 생성. (-sn 플래그, 기본값 = 1)
- 각 구독자는 주제에 대해 메시지를 수신하고, 수신한 메시지의 개수를 검증.
- 기대되는 메시지의 개수와 실제로 수신된 메시지의 개수를 비교해 출력.

[3] 시스템 상태 모니터링 및 출력
출력 형식 구상:
- 구독자의 수(sn)와 각 구독자가 수신한 메시지의 개수를 표 형태로 출력 (*)
(출력 결과)
- 기대되는 마지막 수신 메시지와 실제로 수신한 마지막 메시지를 함께 표로 출력 (2개 컬럼 추가)
----------------------------------------------------------------------------------------------------
구독자 번호   | 수신한 메시지 개수 | 기대한 메시지 개수   | 수신한 마지막 메시지   | 기대한 마지막 메시지
----------------------------------------------------------------------------------------------------
Subscriber 1 | 5                | 5                   | Hello#5              | Hello#5
----------------------------------------------------------------------------------------------------
Subscriber 2 | 5                | 5                   | Hello#5              | Hello#5
----------------------------------------------------------------------------------------------------
...          |                  |                     |                      |
----------------------------------------------------------------------------------------------------
Subscriber n | 5                | 5                   | Hello#5              | Hello#5
----------------------------------------------------------------------------------------------------

- 모든 구독자의 수신 상태가 완료되면 종합 결과를 요약 출력 (마지막으로)
(출력 결과)

총 구독자 수: 100
성공적으로 수신된 메시지: 500 / 500 (100%)

- 아니면 성공적으로 수신하지 못한 구독자의 경우만 요약해 출력? (표 아래에)
(출력 결과)

모든 구독자(100명) 중 97명이 메시지를 정상적으로 수신했습니다.

정상 수신 구독자 수: 97
비정상 수신 구독자 수: 3
- Subscriber23
- Subscriber46
- Subscriber69



[4] 발행자와 구독자 간의 소켓 통신 (구독 프로그램은 하나의 토픽에 대해서만 프로그램은 하나만 실행을 전제로 한다)
- 발행자는 브로커를 거치지 않고 직접 구독자에게 발행 메시지를 알리기 위해 TCP 소켓 통신을 사용.
- 발행자가 메시지를 발행할 때마다 구독자에게 발행 메시지 전체를 직접 전달.
- 구독자는 소켓을 통해 수신된 메시지를 로깅하여 발행자 메시지와의 일관성을 확인.

3. 프로젝트 순서도
(1) 브로커:
- MQTT 브로커를 실행.

(2) 발행자 (Publisher):
- 명령행 플래그(-q)를 통해 QoS 설정.
- 발행할 메시지와 메시지 반복 발행 횟수(-n)을 사용자로부터 입력받아 n번 반복 발행.
- TCP 소켓 서버 역할을 수행하고, 연결된 구독자에게 직접 전체 메시지를 전달.
- -p 리슨 포트 (없으면 listen 안함)

(3) 구독자 (Subscriber):
- 사용자가 입력한 구독자 수(-sn)를 기반으로 sn명의 구독자를 동일한 주제에 연결.
- 각 구독자가 메시지를 수신하고, 수신된 메시지의 개수를 기록.
- TCP 소켓 클라이언트 역할을 수행
- -p 서버 포트 (없으면 연결 안함)

(4) 메시지 수신 검증:
- 기대되는 메시지 개수와 실제 수신된 개수를 비교.
- 구독자별로 수신 현황을 표로 출력. + 마지막 메시지 출력

(5) 결과 요약 및 종료:
- 모든 메시지 수신이 완료되면 총 메시지 수신 상태를 요약.
- 프로그램 종료.

4. 프로젝트 구성도

사용자 입력  ➔  발행자 ➔  MQTT 브로커 ➔  여러 구독자
                      │
                      └──> 구독자에게 직접 발행 메시지 전달 (소켓 통신)

5. 예상 출력 예시

<1> 발행자의 메시지 발행:
Enter the message to publish: Hello!
Enter the number of times to publish: 5 (플래그로)
Publishing messages: Hello#1, Hello#2, Hello#3, Hello#4, Hello#5 (-> 몇 개가 갔다 정도로 요약 제공, 전체 출력은 X, 발행자 입장에서는 출력 X)

Published: Hello#1 (얘도 빼고, 요약해서)
Published: Hello#2
...
Published: Hello#5

<2> 소켓 통신 메시지 확인:
[소켓 통신] 발행자가 보낸 메시지: Hello#1
[소켓 통신] 발행자가 보낸 메시지: Hello#2
...

<3> 구독자 상태:
Subscriber 1 received: Hello#1
Subscriber 1 received: Hello#2
...
Subscriber 1: Received 5/5 messages
Subscriber 2: Received 5/5 messages
...

<4> 마무리 출력
All subscribers completed. 
- Topic: test/topic | Expected messages for each subscribers: 5

--------------------------------------------------
구독자 번호   | 수신한 메시지 개수  | 기대 메시지 개수
--------------------------------------------------
Subscriber 1 | 5                 | 5
--------------------------------------------------
Subscriber 2 | 5                 | 5
--------------------------------------------------
...          |                   |
--------------------------------------------------
Subscriber n | 5                 | 5
--------------------------------------------------

총 구독자 수: 100
성공적으로 수신된 메시지: 500 / 500 (100%)